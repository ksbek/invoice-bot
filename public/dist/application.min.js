!function(window){"use strict";function registerModule(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)}var applicationModuleName="nowdue",service={applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","angularFileUpload"],registerModule:registerModule};window.ApplicationConfiguration=service}(window),function(app){"use strict";function bootstrapConfig($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}function init(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[app.applicationModuleName])}angular.module(app.applicationModuleName,app.applicationModuleVendorDependencies),angular.module(app.applicationModuleName).config(bootstrapConfig),bootstrapConfig.$inject=["$locationProvider","$httpProvider"],angular.element(document).ready(init)}(ApplicationConfiguration),function(app){"use strict";app.registerModule("clients",["core"]),app.registerModule("clients.services"),app.registerModule("clients.routes",["ui.router","core.routes","clients.services"])}(ApplicationConfiguration),function(app){"use strict";app.registerModule("core"),app.registerModule("core.routes",["ui.router"]),app.registerModule("core.admin",["core"]),app.registerModule("core.admin.routes",["ui.router"])}(ApplicationConfiguration),function(app){"use strict";app.registerModule("invoices")}(ApplicationConfiguration),function(app){"use strict";app.registerModule("notifications",["core"]),app.registerModule("notifications.routes",["ui.router","core.routes"])}(ApplicationConfiguration),function(app){"use strict";app.registerModule("users"),app.registerModule("users.admin"),app.registerModule("users.admin.routes",["ui.router","core.routes","users.admin.services"]),app.registerModule("users.admin.services"),app.registerModule("users.routes",["ui.router","core.routes"]),app.registerModule("users.services")}(ApplicationConfiguration),function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Clients",state:"clients.list",roles:["user","admin"],position:3})}angular.module("clients").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("clients",{"abstract":!0,url:"/clients",views:{header:{templateUrl:"modules/core/client/views/header.client.view.html"},"container@":{template:"<ui-view/>"}}}).state("clients.list",{url:"",templateUrl:"modules/clients/client/views/list-clients.client.view.html",controller:"ClientsListController",controllerAs:"vm",data:{roles:["user","admin"],pageTitle:"Clients List"}}).state("clients.create",{url:"/create",templateUrl:"modules/clients/client/views/form-client.client.view.html",controller:"ClientsController",controllerAs:"vm",resolve:{clientResolve:newClient},data:{roles:["user","admin"],pageTitle:"Create Client"}}).state("clients.edit",{url:"/:clientId/edit",templateUrl:"modules/clients/client/views/form-client.client.view.html",controller:"ClientsController",controllerAs:"vm",resolve:{clientResolve:getClient},data:{roles:["user","admin"],pageTitle:"Edit Client {{ clientResolve.name }}"}}).state("clients.view",{url:"/:clientId",templateUrl:"modules/clients/client/views/view-client.client.view.html",controller:"ClientsController",controllerAs:"vm",resolve:{clientResolve:getClient},data:{roles:["user","admin"],pageTitle:"Client {{ articleResolve.name }}"}})}function getClient($stateParams,ClientsService){return ClientsService.get({clientId:$stateParams.clientId}).$promise}function newClient(ClientsService){return new ClientsService}angular.module("clients").config(routeConfig),routeConfig.$inject=["$stateProvider"],getClient.$inject=["$stateParams","ClientsService"],newClient.$inject=["ClientsService"]}(),function(){"use strict";function ClientsController($scope,$state,Authentication,client){function remove(){confirm("Are you sure you want to delete?")&&vm.client.$remove($state.go("clients.list"))}function save(isValid){function successCallback(res){$state.go("clients.list")}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.client._id?vm.client.$update(successCallback,errorCallback):vm.client.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.clientForm"),!1)}var vm=this;vm.authentication=Authentication,vm.client=client,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("clients").controller("ClientsController",ClientsController),ClientsController.$inject=["$scope","$state","Authentication","clientResolve"]}(),function(){"use strict";function ClientsListController(ClientsService,Authentication){function saveClient(client){function successCallback(res){vm.editRow=-1,vm.tempClient=null}function errorCallback(res){vm.error=res.data.message,vm.editRow=-1,vm.tempClient=null}client._id?client.$update(successCallback,errorCallback):client.$save(successCallback,errorCallback)}function edit(client,row){-1===vm.editRow&&(vm.editRow=row,vm.tempClient=angular.copy(client))}function exitEdit(client,row){vm.editRow=-1,vm.clients[row]=vm.tempClient,vm.tempClient=null}var vm=this;vm.authentication=Authentication,vm.clients=ClientsService.query(),vm.saveClient=saveClient,vm.edit=edit,vm.exitEdit=exitEdit,vm.editRow=-1}angular.module("clients").controller("ClientsListController",ClientsListController),ClientsListController.$inject=["ClientsService","Authentication"]}(),function(){"use strict";function ClientsService($resource){return $resource("api/clients/:clientId",{clientId:"@_id"},{update:{method:"PUT"}})}angular.module("clients").factory("ClientsService",ClientsService),ClientsService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(Menus){}angular.module("core.admin").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}angular.module("core.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function menuConfig(Menus){Menus.addMenu("account",{roles:["user"]}),Menus.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["user"]}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile",state:"settings.profile"}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile Picture",state:"settings.picture"}),Menus.addSubMenuItem("account","settings",{title:"Change Password",state:"settings.password"}),Menus.addSubMenuItem("account","settings",{title:"Manage Social Accounts",state:"settings.accounts"})}angular.module("core").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeFilter($rootScope,$state,Authentication){function stateChangeStart(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){for(var allowed=!1,i=0,roles=toState.data.roles;i<roles.length;i++)if("guest"===roles[i]||Authentication.user&&void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(roles[i])){allowed=!0;break}allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.transitionTo("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}function stateChangeSuccess(event,toState,toParams,fromState,fromParams){Authentication.user&&"home"===toState.name&&$state.transitionTo("notifications").then(function(){storePreviousState(toState,toParams)}),storePreviousState(fromState,fromParams)}function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",stateChangeStart),$rootScope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").run(routeFilter),routeFilter.$inject=["$rootScope","$state","Authentication"]}(),function(){"use strict";function routeConfig($stateProvider,$urlRouterProvider){$urlRouterProvider.rule(function($injector,$location){var path=$location.path(),hasTrailingSlash=path.length>1&&"/"===path[path.length-1];if(hasTrailingSlash){var newPath=path.substr(0,path.length-1);$location.replace().path(newPath)}}),$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("root",{url:"","abstract":!0,views:{header:{templateUrl:"modules/core/client/views/header.client.view.html"},container:{template:"<ui-view/>"}}}).state("home",{url:"/",views:{"home@":{templateUrl:"modules/core/client/views/home.client.view.html",controller:"HomeController",controllerAs:"vm"}},data:{pageTitle:"Its time to get paid. Invoice like it is the future",pageDescription:"Instant invoicing for freelancers, startups and small teams. Nowdue is a conversational way to create, send and manage invoices super fast."}}).state("root.privacy",{url:"/privacy",templateUrl:"modules/core/client/views/privacy.client.view.html",data:{ignoreState:!0,pageTitle:"Accounting terms you can understand",pageDescription:"Your privacy is our highest priority. We collect data to securely delivery a better user experience and to respond to any inquiries you make in regards to your Nowdue account."}}).state("root.faq",{url:"/faq",templateUrl:"modules/core/client/views/faq.client.view.html",data:{ignoreState:!0,pageTitle:"Send unlimited invoices from Slack",pageDescription:"Nowdue is a slack invoicing bot accessible through Slack's conversational messaging interface. It's free to sign up. No credit card required. Give it a go today."}}).state("not-found",{url:"/not-found",views:{header:{templateUrl:"modules/core/client/views/header.client.view.html"},"container@":{templateUrl:"modules/core/client/views/404.client.view.html"}},data:{ignoreState:!0,pageTitle:"Not-Found"}}).state("bad-request",{url:"/bad-request",views:{header:{templateUrl:"modules/core/client/views/header.client.view.html"},"container@":{templateUrl:"modules/core/client/views/400.client.view.html"}},data:{ignoreState:!0,pageTitle:"Bad-Request"}}).state("forbidden",{url:"/forbidden",views:{header:{templateUrl:"modules/core/client/views/header.client.view.html"},"container@":{templateUrl:"modules/core/client/views/403.client.view.html"}},data:{ignoreState:!0,pageTitle:"Forbidden"}}).state("confirmuser",{url:"/confirmuser/:token",templateUrl:"modules/core/client/views/confirmuser.client.view.html",controller:"ConfirmUserController",controllerAs:"vm",data:{ignoreState:!0,pageTitle:"Confirm User"}})}angular.module("core.routes").config(routeConfig),routeConfig.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function ConfirmUserController($scope,$state,$http,$location,$window){}angular.module("core").controller("ConfirmUserController",ConfirmUserController),ConfirmUserController.$inject=["$scope","$state","$http","$location","$window"]}(),function(){"use strict";function HeaderController($scope,$state,$rootScope,Authentication,Menus,$uibModal,Socket,$window){function callOauthProvider(url){$window.location.href=url}function stateChangeSuccess(){vm.isCollapsed=!1}function createClient(){$uibModal.open({templateUrl:"modules/clients/client/views/new-client.client.view.html",size:"lg",windowClass:"client-modal",controller:"ClientsController",controllerAs:"vm",resolve:{clientResolve:newClient}})}function init(){Socket.socket||Socket.connect(),Socket.on(Authentication.user.id+"notification",function(message){})}function newClient(ClientsService){return new ClientsService}var vm=this;vm.accountMenu=Menus.getMenu("account").items[0],vm.authentication=Authentication,vm.isCollapsed=!1,vm.menu=Menus.getMenu("topbar"),vm.createClient=createClient,vm.state=$state,$scope.$on("$stateChangeSuccess",stateChangeSuccess),init(),vm.callOauthProvider=callOauthProvider,newClient.$inject=["ClientsService"]}angular.module("core").controller("HeaderController",HeaderController),HeaderController.$inject=["$scope","$state","$rootScope","Authentication","Menus","$uibModal","Socket","$window"]}(),function(){"use strict";function HomeController($scope,$state,$http,$location,$window){function callOauthProvider(url){$window.location.href=url}var vm=this;vm.callOauthProvider=callOauthProvider}angular.module("core").controller("HomeController",HomeController),HomeController.$inject=["$scope","$state","$http","$location","$window"]}(),function(){"use strict";function pageDescription($rootScope,$timeout,$interpolate,$state){function link(scope,element){function listener(event,toState){var description=getDescription($state.$current);$timeout(function(){element[0].setAttribute("content",description)},0,!1)}function getDescription(currentState){var applicationCoreDescription="Instant invoicing for freelancers, startups and small teams. Nowdue is a conversational way to create, send and manage invoices super fast.",workingState=currentState;if(currentState.data&&currentState.data.pageDescription){workingState="undefined"!=typeof workingState.locals?workingState.locals.globals:workingState;var stateDescription=$interpolate(currentState.data.pageDescription)(workingState);return stateDescription}return applicationCoreDescription}$rootScope.$on("$stateChangeSuccess",listener)}var directive={retrict:"A",link:link};return directive}angular.module("core").directive("pageDescription",pageDescription),pageDescription.$inject=["$rootScope","$timeout","$interpolate","$state"]}(),function(){"use strict";function pageTitle($rootScope,$timeout,$interpolate,$state){function link(scope,element){function listener(event,toState){var title=getTitle($state.$current);$timeout(function(){element.text(title)},0,!1)}function getTitle(currentState){var applicationCoreTitle="Nowdue",workingState=currentState;if(currentState.data){workingState="undefined"!=typeof workingState.locals?workingState.locals.globals:workingState;var stateTitle=$interpolate(currentState.data.pageTitle)(workingState);return applicationCoreTitle+" - "+stateTitle}return applicationCoreTitle}$rootScope.$on("$stateChangeSuccess",listener)}var directive={retrict:"A",link:link};return directive}angular.module("core").directive("pageTitle",pageTitle),pageTitle.$inject=["$rootScope","$timeout","$interpolate","$state"]}(),function(){"use strict";function showErrors($timeout,$interpolate){function compile(elem,attrs){function linkFn(scope,el,attrs,formCtrl){function checkValidity(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}function reset(event,name){return angular.isUndefined(name)||formCtrl.$name===name?$timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1):void 0}function toggleClasses(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}var inputEl,inputName,inputNgEl,options,showSuccess,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw new Error("show-errors element has no child input elements with a 'name' attribute class");scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},toggleClasses),scope.$on("show-errors-check-validity",checkValidity),scope.$on("show-errors-reset",reset)}if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw new Error("show-errors element does not have the 'form-group' or 'input-group' class");return linkFn}var directive={restrict:"A",require:"^form",compile:compile};return directive}angular.module("core").directive("showErrors",showErrors),showErrors.$inject=["$timeout","$interpolate"]}(),function(){"use strict";function authInterceptor($q,$injector,Authentication){function responseError(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}var service={responseError:responseError};return service}angular.module("core").factory("authInterceptor",authInterceptor),authInterceptor.$inject=["$q","$injector","Authentication"]}(),function(){"use strict";function Menus(){function addMenu(menuId,options){return options=options||{},service.menus[menuId]={roles:options.roles||service.defaultRoles,items:options.items||[],shouldRender:shouldRender},service.menus[menuId]}function addMenuItem(menuId,options){if(options=options||{},service.validateMenuExistance(menuId),service.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?service.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)options.items.hasOwnProperty(i)&&service.addSubMenuItem(menuId,options.state,options.items[i]);return service.menus[menuId]}function addSubMenuItem(menuId,parentItemState,options){options=options||{},service.validateMenuExistance(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items[itemIndex].state===parentItemState&&service.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?service.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return service.menus[menuId]}function getMenu(menuId){return service.validateMenuExistance(menuId),service.menus[menuId]}function init(){shouldRender=function(user){if(-1!==this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)if(user.roles.hasOwnProperty(userRoleIndex))for(var roleIndex in this.roles)if(this.roles.hasOwnProperty(roleIndex)&&this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1},addMenu("topbar",{roles:["*"]})}function removeMenu(menuId){service.validateMenuExistance(menuId),delete service.menus[menuId]}function removeMenuItem(menuId,menuItemState){service.validateMenuExistance(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items.hasOwnProperty(itemIndex)&&service.menus[menuId].items[itemIndex].state===menuItemState&&service.menus[menuId].items.splice(itemIndex,1);return service.menus[menuId]}function removeSubMenuItem(menuId,submenuItemState){service.validateMenuExistance(menuId);for(var itemIndex in service.menus[menuId].items)if(this.menus[menuId].items.hasOwnProperty(itemIndex))for(var subitemIndex in service.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items.hasOwnProperty(subitemIndex)&&service.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&service.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return service.menus[menuId]}function validateMenuExistance(menuId){if(menuId&&menuId.length){if(service.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")}var shouldRender,service={addMenu:addMenu,addMenuItem:addMenuItem,addSubMenuItem:addSubMenuItem,defaultRoles:["user","admin"],getMenu:getMenu,menus:{},removeMenu:removeMenu,removeMenuItem:removeMenuItem,removeSubMenuItem:removeSubMenuItem,validateMenuExistance:validateMenuExistance};return init(),service}angular.module("core").factory("Menus",Menus)}(),function(){"use strict";function Socket(Authentication,$state,$timeout){function connect(){Authentication.user&&(service.socket=io())}function emit(eventName,data){service.socket&&service.socket.emit(eventName,data)}function on(eventName,callback){service.socket&&service.socket.on(eventName,function(data){$timeout(function(){callback(data)})})}function removeListener(eventName){service.socket&&service.socket.removeListener(eventName)}var service={connect:connect,emit:emit,on:on,removeListener:removeListener,socket:null};return connect(),service}angular.module("core").factory("Socket",Socket),Socket.$inject=["Authentication","$state","$timeout"]}(),function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Invoices",state:"invoices.list",roles:["user","admin"],position:2})}angular.module("invoices").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("invoices",{"abstract":!0,url:"/invoices",views:{header:{templateUrl:"modules/core/client/views/header.client.view.html"},"container@":{template:"<ui-view/>"}}}).state("invoices.list",{url:"",templateUrl:"modules/invoices/client/views/list-invoices.client.view.html",controller:"InvoicesListController",controllerAs:"vm",resolve:{invoices:getInvoices},data:{pageTitle:"Invoices List"}}).state("invoices.listByClient",{url:"/client/:clientId",templateUrl:"modules/invoices/client/views/list-invoices.client.view.html",controller:"InvoicesListByClientController",controllerAs:"vm",resolve:{invoices:getInvoiceByClient},data:{pageTitle:"Invoices List"}}).state("invoices.create",{url:"/create",templateUrl:"modules/invoices/client/views/form-invoice.client.view.html",controller:"InvoicesController",controllerAs:"vm",resolve:{invoiceResolve:newInvoice,isClient:[function(){return!1}]},data:{roles:["user","admin"],pageTitle:"Create Invoice"}}).state("invoices.edit",{url:"/:invoiceId/edit",templateUrl:"modules/invoices/client/views/form-invoice.client.view.html",controller:"InvoicesController",controllerAs:"vm",resolve:{invoiceResolve:getInvoice,isClient:[function(){return!1}]},data:{roles:["user","admin"],pageTitle:"Edit Invoice {{ invoiceResolve.name }}"}}).state("invoicesview",{url:"/invoices/:invoiceId",views:{"container@":{templateUrl:"modules/invoices/client/views/view-invoice.client.view.html",controller:"InvoicesController",controllerAs:"vm"},header:{templateUrl:"modules/invoices/client/views/invoice-view-header.client.view.html",controller:"InvoicesController",controllerAs:"vm"},footer:{templateUrl:"modules/invoices/client/views/invoice-view-footer.client.view.html",controller:"InvoicesController",controllerAs:"vm"}},resolve:{invoiceResolve:getInvoice,isClient:[function(){return!1}]},data:{pageTitle:"Invoice View"}}).state("invoicesviewbyclient",{url:"/invoices/token/:token",views:{"container@":{templateUrl:"modules/invoices/client/views/view-invoice.client.view.html",controller:"InvoicesController",controllerAs:"vm"},header:{templateUrl:"modules/invoices/client/views/invoice-view-header.client.view.html",controller:"InvoicesController",controllerAs:"vm"},footer:{templateUrl:"modules/invoices/client/views/invoice-view-footer.client.view.html",controller:"InvoicesController",controllerAs:"vm"}},resolve:{invoiceResolve:getInvoiceFromClient,isClient:[function(){return!0}]},data:{pageTitle:"Invoice View"}})}function getInvoice($stateParams,InvoicesService){return InvoicesService.get({invoiceId:$stateParams.invoiceId}).$promise}function getInvoiceFromClient($stateParams,$http){return $http.post("/api/invoices/token/"+$stateParams.token)}function newInvoice(InvoicesService){return new InvoicesService}function getInvoices(InvoicesService){return InvoicesService.query().$promise}function getInvoiceByClient($stateParams,$http){return $http.post("/api/invoices/client/"+$stateParams.clientId,{params:{clientId:$stateParams.clientId}})}angular.module("invoices").config(routeConfig),routeConfig.$inject=["$stateProvider"],getInvoice.$inject=["$stateParams","InvoicesService"],getInvoiceFromClient.$inject=["$stateParams","$http"],newInvoice.$inject=["InvoicesService"],getInvoices.$inject=["InvoicesService"],getInvoiceByClient.$inject=["$stateParams","$http"]}(),function(){"use strict";function InvoicesController($scope,$state,$http,Authentication,invoice,ClientsService,$uibModal,$window,isClient){function remove(){confirm("Are you sure you want to delete?")&&vm.invoice.$remove($state.go("invoices.list"))}function save(isValid){function successCallback(res){$state.go("invoicesview",{invoiceId:res._id})}function errorCallback(res){vm.error=res.data.message}return null!==vm.invoice.tax&&""!==vm.invoice.tax||(vm.invoice.tax=0),null!==vm.invoice.amountDue.amount&&""!==vm.invoice.amountDue.amount||(vm.invoice.amountDue.amount=0),isValid?void(vm.invoice._id?vm.invoice.$update(successCallback,errorCallback):vm.invoice.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.invoiceForm"),!1)}function payNow(invoice){var modalInstance=$uibModal.open({templateUrl:"modules/invoices/client/views/pay-invoice.client.view.html",size:"sm",windowClass:"invoice-modal",backdrop:"static",controller:["$state","Authentication","invoice",function($scope,Authentication,invoice){function callOauthProvider(url){$window.location.href=url}function pay(){vm.error="",vm.loading=!0,$http.post("/api/invoices/"+vm.invoice._id+"/paynow",{params:{card:vm.details}}).success(function(response){vm.invoice.status=response.status,"paid"===vm.invoice.status&&(vm.invoice.paidDate="Today"),modalInstance.close();$uibModal.open({templateUrl:"modules/invoices/client/views/paid-invoice-modal.client.view.html",size:"sm",windowClass:"invoice-paid-success-modal"})}).error(function(response){vm.loading=!1,response.code&&"not-stripe-connected"===response.code&&(vm.errorCode=response.code),vm.error=response.message})}var vm=this;vm.invoice=invoice,vm.authentication=Authentication,vm.pay=pay,vm.details={},vm.errorCode="",vm.currencySymbols={USD:"$",AUD:"$",EUR:"€",GBP:"£",CAD:"$",ALL:"Lek",ARS:"$",AWG:"ƒ",BSD:"$",BBD:"$",BYR:"p.",BZD:"BZ$",BMD:"$",BOB:"$b",BAM:"KM",BWP:"P",BGN:"лв",BRL:"R$",BND:"$",KHR:"៛",KYD:"$",CLP:"$",CNY:"¥",COP:"$",CRC:"₡",HRK:"kn",CUP:"₱",CZK:"Kč",DKK:"kr",DOP:"RD$",XCD:"$",EGP:"£",SVC:"$",FKP:"£",FJD:"$",GHS:"¢",GIP:"£",GTQ:"Q",GGP:"£",GYD:"$",HNL:"L",HKD:"$",HUF:"Ft",ISK:"kr",IDR:"Rp",IRR:"﷼  ﷼",IMP:"£",ILS:"₪",JMD:"J$",JPY:"¥",JEP:"£",KZT:"лв",KRW:"₩",KGS:"лв",LAK:"₭",LBP:"£",LRD:"$",MKD:"ден",MYR:"RM",MUR:"₨",MXN:"$",MNT:"₮",MZN:"MT",NAD:"$",NPR:"₨",ANG:"ƒ",NZD:"$",NIO:"C$",NGN:"₦",NOK:"kr",OMR:"﷼",PKR:"₨",PAB:"B/.",PYG:"Gs",PEN:"S/.",PHP:"₱",PLN:"zł",QAR:"﷼  ﷼",RON:"lei",RUB:"руб",SHP:"£",SAR:"﷼ ﷼",RSD:"Дин.",SCR:"₨",SGD:"$",SBD:"$",SOS:"S",ZAR:"R",LKR:"₨",SEK:"kr",CHF:"CHF",SRD:"$",SYP:"£",TWD:"NT$",THB:"฿",TTD:"TT$",TVD:"$",UAH:"₴",UYU:"$U",UZS:"лв",VEF:"Bs",VND:"₫",YER:"﷼",ZWD:"Z$"},vm.callOauthProvider=callOauthProvider}],controllerAs:"vm",resolve:{invoice:invoice}})}var vm=this;"invoicesview"!==$state.current.name&&"invoicesviewbyclient"!==$state.current.name&&(vm.clients=ClientsService.query()),vm.authentication=Authentication,isClient?vm.invoice=invoice.data:vm.invoice=invoice,vm.error=null,vm.form={},vm.remove=remove,vm.save=save;var dueDays=Math.ceil(((new Date).setHours(0,0,0,0)-new Date(vm.invoice.dateIssued).setHours(0,0,0,0))/864e5),dueDateAllowance=Math.ceil((new Date(vm.invoice.dateDue).getTime()-new Date(vm.invoice.dateIssued).getTime())/864e5);if("paid"!==vm.invoice.status&&(dueDateAllowance>=dueDays?vm.invoice.status="due":vm.invoice.status="overdue"),vm.invoice.dueDays=dueDays,"paid"===vm.invoice.status&&vm.invoice.datePaid){var timeDiff=Math.floor(Math.abs((new Date).setHours(0,0,0,0)-new Date(vm.invoice.datePaid).setHours(0,0,0,0))/864e5);timeDiff>=1?vm.invoice.paidDate=timeDiff+"d ago":vm.invoice.paidDate="Today"}void 0!==vm.invoice.amountDue.currency&&""!==vm.invoice.amountDue.currency||(vm.invoice.amountDue.currency=vm.authentication.user.currency||"USD"),void 0!==vm.invoice.tax&&0!==vm.invoice.tax||(vm.invoice.tax=vm.authentication.user.tax||0),vm.currencySymbols={USD:"$",AUD:"$",EUR:"€",GBP:"£",CAD:"$",ALL:"Lek",ARS:"$",AWG:"ƒ",BSD:"$",BBD:"$",BYR:"p.",BZD:"BZ$",BMD:"$",BOB:"$b",BAM:"KM",BWP:"P",BGN:"лв",BRL:"R$",BND:"$",KHR:"៛",KYD:"$",CLP:"$",CNY:"¥",COP:"$",CRC:"₡",HRK:"kn",CUP:"₱",CZK:"Kč",DKK:"kr",DOP:"RD$",XCD:"$",EGP:"£",SVC:"$",FKP:"£",FJD:"$",GHS:"¢",GIP:"£",GTQ:"Q",GGP:"£",GYD:"$",HNL:"L",HKD:"$",HUF:"Ft",ISK:"kr",IDR:"Rp",IRR:"﷼  ﷼",IMP:"£",ILS:"₪",JMD:"J$",JPY:"¥",JEP:"£",KZT:"лв",KRW:"₩",KGS:"лв",LAK:"₭",LBP:"£",LRD:"$",MKD:"ден",MYR:"RM",MUR:"₨",MXN:"$",MNT:"₮",MZN:"MT",NAD:"$",NPR:"₨",ANG:"ƒ",NZD:"$",NIO:"C$",NGN:"₦",NOK:"kr",OMR:"﷼",PKR:"₨",PAB:"B/.",PYG:"Gs",PEN:"S/.",PHP:"₱",PLN:"zł",QAR:"﷼  ﷼",RON:"lei",RUB:"руб",SHP:"£",SAR:"﷼ ﷼",RSD:"Дин.",SCR:"₨",SGD:"$",SBD:"$",SOS:"S",ZAR:"R",LKR:"₨",SEK:"kr",CHF:"CHF",SRD:"$",SYP:"£",TWD:"NT$",THB:"฿",TTD:"TT$",TVD:"$",UAH:"₴",UYU:"$U",UZS:"лв",VEF:"Bs",VND:"₫",YER:"﷼",ZWD:"Z$"},vm.payNow=payNow}angular.module("invoices").controller("InvoicesController",InvoicesController),InvoicesController.$inject=["$scope","$state","$http","Authentication","invoiceResolve","ClientsService","$uibModal","$window","isClient"]}(),function(){"use strict";function InvoicesListByClientController(InvoicesService,$uibModal,$http,Authentication,invoices){function saveInvoice(invoice){function successCallback(res){vm.editRow=-1,invoice=res,vm.tempInvoice=null;var dueDays=Math.ceil(((new Date).setHours(0,0,0,0)-new Date(invoice.dateIssued).setHours(0,0,0,0))/864e5),dueDateAllowance=Math.ceil((new Date(invoice.dateDue).getTime()-new Date(invoice.dateIssued).getTime())/864e5);"paid"!==invoice.status&&(dueDateAllowance>=dueDays?invoice.status="due":invoice.status="overdue",invoice.dateDue=new Date(invoice.dateDue))}function errorCallback(res){vm.error=res.data.message}vm.editRow=-1,vm.tempInvoice=null,invoice._id?new InvoicesService(invoice).$update(successCallback,errorCallback):new InvoicesService(invoice).$save(successCallback,errorCallback)}function edit(invoice,row){-1===vm.editRow&&(vm.editRow=row,invoice.dateDue=new Date(invoice.dateDue),vm.tempInvoice=angular.copy(invoice))}function exitEdit(invoice,row){vm.editRow=-1,vm.invoices[row]=vm.tempInvoice,vm.tempInvoice=null}var vm=this;vm.authentication=Authentication,vm.currencySymbols={USD:"$",AUD:"$",EUR:"€",GBP:"£",CAD:"$",ALL:"Lek",ARS:"$",AWG:"ƒ",BSD:"$",BBD:"$",BYR:"p.",BZD:"BZ$",BMD:"$",BOB:"$b",BAM:"KM",BWP:"P",BGN:"лв",BRL:"R$",BND:"$",KHR:"៛",KYD:"$",CLP:"$",CNY:"¥",COP:"$",CRC:"₡",HRK:"kn",CUP:"₱",CZK:"Kč",DKK:"kr",DOP:"RD$",XCD:"$",EGP:"£",SVC:"$",FKP:"£",FJD:"$",GHS:"¢",GIP:"£",GTQ:"Q",GGP:"£",GYD:"$",HNL:"L",HKD:"$",HUF:"Ft",ISK:"kr",IDR:"Rp",IRR:"﷼  ﷼",IMP:"£",ILS:"₪",JMD:"J$",JPY:"¥",JEP:"£",KZT:"лв",KRW:"₩",KGS:"лв",LAK:"₭",LBP:"£",LRD:"$",MKD:"ден",MYR:"RM",MUR:"₨",MXN:"$",MNT:"₮",MZN:"MT",NAD:"$",NPR:"₨",ANG:"ƒ",NZD:"$",NIO:"C$",NGN:"₦",NOK:"kr",OMR:"﷼",PKR:"₨",PAB:"B/.",PYG:"Gs",PEN:"S/.",PHP:"₱",PLN:"zł",QAR:"﷼  ﷼",RON:"lei",RUB:"руб",SHP:"£",SAR:"﷼ ﷼",RSD:"Дин.",SCR:"₨",SGD:"$",SBD:"$",SOS:"S",ZAR:"R",LKR:"₨",SEK:"kr",CHF:"CHF",SRD:"$",SYP:"£",TWD:"NT$",THB:"฿",TTD:"TT$",TVD:"$",UAH:"₴",UYU:"$U",UZS:"лв",VEF:"Bs",VND:"₫",YER:"﷼",ZWD:"Z$"},vm.invoices=invoices.data;for(var i=0;i<vm.invoices.length;i++){var dueDays=Math.ceil(((new Date).setHours(0,0,0,0)-new Date(vm.invoices[i].dateIssued).setHours(0,0,0,0))/864e5);console.log(dueDays);var dueDateAllowance=Math.ceil((new Date(vm.invoices[i].dateDue).getTime()-new Date(vm.invoices[i].dateIssued).getTime())/864e5);
console.log(dueDateAllowance),"paid"!==vm.invoices[i].status&&(dueDateAllowance>=dueDays?vm.invoices[i].status="due":vm.invoices[i].status="overdue",vm.invoices[i].dateDue=new Date(vm.invoices[i].dateDue))}vm.saveInvoice=saveInvoice,vm.exitEdit=exitEdit,vm.edit=edit,vm.editRow=-1}angular.module("invoices").controller("InvoicesListByClientController",InvoicesListByClientController),InvoicesListByClientController.$inject=["InvoicesService","$uibModal","$http","Authentication","invoices"]}(),function(){"use strict";function InvoicesListController(InvoicesService,$uibModal,Authentication,invoices){function saveInvoice(invoice){function successCallback(res){vm.editRow=-1,invoice=res,vm.tempInvoice=null;var dueDays=Math.ceil(((new Date).setHours(0,0,0,0)-new Date(invoice.dateIssued).setHours(0,0,0,0))/864e5),dueDateAllowance=Math.ceil((new Date(invoice.dateDue).getTime()-new Date(invoice.dateIssued).getTime())/864e5);"paid"!==invoice.status&&(dueDateAllowance>=dueDays?invoice.status="due":invoice.status="overdue",invoice.dateDue=new Date(invoice.dateDue))}function errorCallback(res){vm.error=res.data.message,vm.editRow=-1,vm.tempInvoice=null}invoice._id?invoice.$update(successCallback,errorCallback):invoice.$save(successCallback,errorCallback)}function edit(invoice,row){-1===vm.editRow&&(vm.editRow=row,invoice.dateDue=new Date(invoice.dateDue),vm.tempInvoice=angular.copy(invoice))}function exitEdit(invoice,row){vm.editRow=-1;var index=vm.invoices.findIndex(function(inv){return inv._id===invoice._id});vm.invoices[index]=vm.tempInvoice,vm.tempInvoice=null}var vm=this;vm.authentication=Authentication,vm.currencySymbols={USD:"$",AUD:"$",EUR:"€",GBP:"£",CAD:"$",ALL:"Lek",ARS:"$",AWG:"ƒ",BSD:"$",BBD:"$",BYR:"p.",BZD:"BZ$",BMD:"$",BOB:"$b",BAM:"KM",BWP:"P",BGN:"лв",BRL:"R$",BND:"$",KHR:"៛",KYD:"$",CLP:"$",CNY:"¥",COP:"$",CRC:"₡",HRK:"kn",CUP:"₱",CZK:"Kč",DKK:"kr",DOP:"RD$",XCD:"$",EGP:"£",SVC:"$",FKP:"£",FJD:"$",GHS:"¢",GIP:"£",GTQ:"Q",GGP:"£",GYD:"$",HNL:"L",HKD:"$",HUF:"Ft",ISK:"kr",IDR:"Rp",IRR:"﷼  ﷼",IMP:"£",ILS:"₪",JMD:"J$",JPY:"¥",JEP:"£",KZT:"лв",KRW:"₩",KGS:"лв",LAK:"₭",LBP:"£",LRD:"$",MKD:"ден",MYR:"RM",MUR:"₨",MXN:"$",MNT:"₮",MZN:"MT",NAD:"$",NPR:"₨",ANG:"ƒ",NZD:"$",NIO:"C$",NGN:"₦",NOK:"kr",OMR:"﷼",PKR:"₨",PAB:"B/.",PYG:"Gs",PEN:"S/.",PHP:"₱",PLN:"zł",QAR:"﷼  ﷼",RON:"lei",RUB:"руб",SHP:"£",SAR:"﷼ ﷼",RSD:"Дин.",SCR:"₨",SGD:"$",SBD:"$",SOS:"S",ZAR:"R",LKR:"₨",SEK:"kr",CHF:"CHF",SRD:"$",SYP:"£",TWD:"NT$",THB:"฿",TTD:"TT$",TVD:"$",UAH:"₴",UYU:"$U",UZS:"лв",VEF:"Bs",VND:"₫",YER:"﷼",ZWD:"Z$"},vm.invoices=invoices;for(var i=0;i<vm.invoices.length;i++){var dueDays=Math.ceil(((new Date).setHours(0,0,0,0)-new Date(vm.invoices[i].dateIssued).setHours(0,0,0,0))/864e5),dueDateAllowance=Math.ceil((new Date(vm.invoices[i].dateDue).getTime()-new Date(vm.invoices[i].dateIssued).getTime())/864e5);"paid"!==vm.invoices[i].status&&(dueDateAllowance>=dueDays?vm.invoices[i].status="due":vm.invoices[i].status="overdue",vm.invoices[i].dateDue=new Date(vm.invoices[i].dateDue))}vm.saveInvoice=saveInvoice,vm.exitEdit=exitEdit,vm.edit=edit,vm.editRow=-1}angular.module("invoices").controller("InvoicesListController",InvoicesListController),InvoicesListController.$inject=["InvoicesService","$uibModal","Authentication","invoices"]}(),function(){"use strict";function InvoicesService($resource){return $resource("api/invoices/:invoiceId",{invoiceId:"@_id"},{update:{method:"PUT"}})}angular.module("invoices").factory("InvoicesService",InvoicesService),InvoicesService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Notifications",state:"notifications",roles:["user"],position:1})}angular.module("notifications").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("notifications",{url:"/dashboard",views:{header:{templateUrl:"modules/core/client/views/header.client.view.html"},"container@":{templateUrl:"modules/notifications/client/views/notifications.client.view.html",controller:"NotificationsController",controllerAs:"vm"}},data:{roles:["user","admin"],pageTitle:"Dashboard"}})}angular.module("notifications.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function NotificationsController($scope,$state,$rootScope,$http,$window,Authentication,NotificationsService){function callOauthProvider(url){$window.location.href=url}function init(){Authentication.user||$state.go("home")}function sendMessage(){var message={text:vm.messageText,created:Date.now()};vm.isAnswered=!1,vm.messages.push(message),$http.post("/api/notifications/apiai",message).success(function(response){vm.isAnswered=!0}).error(function(response){vm.error=response.message}),vm.messageText="",$window.open(Authentication.user.providerData.url+"messages/@nowdue/","_blank")}var vm=this;vm.messages=[],vm.messageText="",vm.sendMessage=sendMessage,vm.authentication=Authentication,vm.isAnswered=!0,init(),vm.callOauthProvider=callOauthProvider,vm.notifications=NotificationsService.query()}angular.module("notifications").controller("NotificationsController",NotificationsController),NotificationsController.$inject=["$scope","$state","$rootScope","$http","$window","Authentication","NotificationsService"]}(),angular.module("notifications").filter("unsafe",["$sce",function($sce){return $sce.trustAsHtml}]),function(){"use strict";function NotificationsService($resource){return $resource("api/notifications/:notificationId",{notificationId:"@_id"},{update:{method:"PUT"}})}angular.module("notifications").factory("NotificationsService",NotificationsService),NotificationsService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}angular.module("users.admin").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){"use strict";function routeConfig($stateProvider){function getUser($stateParams,AdminService){return AdminService.get({userId:$stateParams.userId}).$promise}$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController",controllerAs:"vm",data:{pageTitle:"Users List"}}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit {{ userResolve.displayName }}"}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit User {{ userResolve.displayName }}"}}),getUser.$inject=["$stateParams","AdminService"]}angular.module("users.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function routeConfig($stateProvider){function getUsers($http){return $http.post("/api/users/teammembers")}$stateProvider.state("settings",{"abstract":!0,url:"/settings",views:{header:{templateUrl:"modules/core/client/views/header.client.view.html"},"container@":{templateUrl:"modules/users/client/views/settings/settings.client.view.html",controller:"SettingsController",controllerAs:"vm"}},controller:"SettingsController",controllerAs:"vm",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html",controller:"EditProfileController",controllerAs:"vm",data:{pageTitle:"Settings"}}).state("settings.conversation",{url:"/conversation-settings",templateUrl:"modules/users/client/views/settings/conversation-settings.client.view.html",controller:"ConversationSettingsController",controllerAs:"vm",data:{pageTitle:"Settings conversation"}}).state("settings.invoice",{url:"/invoice-settings",templateUrl:"modules/users/client/views/settings/invoice-settings.client.view.html",controller:"InvoiceSettingsController",controllerAs:"vm",data:{pageTitle:"Settings invoice"}}).state("settings.plans",{url:"/plans",templateUrl:"modules/users/client/views/settings/plans.client.view.html",controller:"PlansController",controllerAs:"vm",data:{pageTitle:"Settings plans"}}).state("settings.pricing",{url:"/pricing",templateUrl:"modules/users/client/views/settings/pricing.client.view.html",controller:"PlansController",controllerAs:"vm",data:{pageTitle:"Settings pricing"}}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html",controller:"ChangePasswordController",controllerAs:"vm",data:{pageTitle:"Settings password"}}).state("settings.integrations",{url:"/integrations",templateUrl:"modules/users/client/views/settings/manage-integrations.client.view.html",controller:"ManageIntegrationsController",controllerAs:"vm",data:{pageTitle:"Settings integrations"}}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html",controller:"ChangeProfilePictureController",controllerAs:"vm",data:{pageTitle:"Settings picture"}}).state("settings.team",{url:"/team",templateUrl:"modules/users/client/views/settings/team.client.view.html",controller:"TeamController",controllerAs:"vm",data:{pageTitle:"Users"},resolve:{getUsers:getUsers}}).state("authentication",{"abstract":!0,url:"/authentication",views:{header:{templateUrl:"modules/core/client/views/header.client.view.html"}},controller:"AuthenticationController",controllerAs:"vm"}).state("authentication.signup",{url:"/signup",views:{"container@":{templateUrl:"modules/users/client/views/authentication/signup.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}},data:{pageTitle:"signup"}}).state("authentication.accountSetup",{url:"/account-setup",views:{"container@":{templateUrl:"modules/users/client/views/authentication/account-setup.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}},data:{pageTitle:"Account Setup"}}).state("authentication.pending",{url:"/pending",views:{"container@":{templateUrl:"modules/users/client/views/authentication/pending.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}},data:{pageTitle:"Pending"}}).state("authentication.signin",{url:"/signin?err",views:{"container@":{templateUrl:"modules/users/client/views/authentication/signin.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}},data:{pageTitle:"Sign In and get your invoices paid",pageDescription:"Sign into Nowdue. Access your account by entering your email and password. If you have not yet signed up to Nowdue please visit the home page and select the Add to Slack button."}}).state("password",{"abstract":!0,url:"/password",views:{header:{templateUrl:"modules/core/client/views/header.client.view.html"}}}).state("password.forgot",{url:"/forgot",views:{"container@":{templateUrl:"modules/users/client/views/password/forgot-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password forgot"}}}}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",views:{"container@":{templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html",data:{pageTitle:"Password reset invalid"}}}}).state("password.reset.success",{url:"/success",views:{"container@":{templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html",data:{pageTitle:"Password reset success"}}}}).state("password.reset.form",{url:"/:token",views:{"container@":{templateUrl:"modules/users/client/views/password/reset-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password reset form"}}}}),getUsers.$inject=["$http"]}angular.module("users.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function UserListController($scope,$filter,AdminService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=15,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.users,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,AdminService.query(function(data){vm.users=data,vm.buildPager()})}angular.module("users.admin").controller("UserListController",UserListController),UserListController.$inject=["$scope","$filter","AdminService"]}(),function(){"use strict";function UserController($scope,$state,$window,Authentication,user){function remove(user){$window.confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),vm.users.splice(vm.users.indexOf(user),1)):vm.user.$remove(function(){$state.go("admin.users")}))}function update(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=vm.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){vm.error=errorResponse.data.message})}var vm=this;vm.authentication=Authentication,vm.user=user,vm.remove=remove,vm.update=update}angular.module("users.admin").controller("UserController",UserController),UserController.$inject=["$scope","$state","$window","Authentication","userResolve"]}(),function(){"use strict";function AuthenticationController($scope,$state,$http,$location,$window,Authentication,PasswordValidator){function signup(isValid){return vm.error=null,isValid?void $http.post("/api/auth/signup",vm.credentials).success(function(response){vm.authentication.user=response,$state.go($state.previous.state.name||"settings.invoice",$state.previous.params)}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function signin(isValid){return vm.error=null,isValid?void $http.post("/api/auth/signin",vm.credentials).success(function(response){vm.authentication.user=response,$state.go($state.previous.state.name||"notifications",$state.previous.params)}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function callOauthProvider(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}var vm=this;vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.signup=signup,vm.signin=signin,vm.callOauthProvider=callOauthProvider,vm.credentials={};var token=$location.search().token;token&&$http.post("/api/auth/getUserInfoFromToken",{token:token}).success(function(response){vm.credentials=response,vm.credentials.token=token}).error(function(response){vm.credentials.token=token,vm.error=response.message}),vm.error=$location.search().err,vm.authentication.user&&$location.path("/")}angular.module("users").controller("AuthenticationController",AuthenticationController),AuthenticationController.$inject=["$scope","$state","$http","$location","$window","Authentication","PasswordValidator"]}(),function(){"use strict";function PasswordController($scope,$stateParams,$http,$location,Authentication,PasswordValidator){function askForPasswordReset(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/auth/forgot",vm.credentials).success(function(response){vm.credentials=null,vm.success=response.message}).error(function(response){vm.credentials=null,vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.forgotPasswordForm"),!1)}function resetUserPassword(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,vm.passwordDetails).success(function(response){vm.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.resetPasswordForm"),!1)}var vm=this;vm.resetUserPassword=resetUserPassword,vm.askForPasswordReset=askForPasswordReset,vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.authentication.user&&$location.path("/")}angular.module("users").controller("PasswordController",PasswordController),PasswordController.$inject=["$scope","$stateParams","$http","$location","Authentication","PasswordValidator"]}(),function(){"use strict";function ChangePasswordController($scope,$http,Authentication,PasswordValidator,newPassword){function changeUserPassword(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/users/password",vm.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","vm.passwordForm"),vm.success=!0,vm.passwordDetails=null,$scope.$close()}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.passwordForm"),!1)}var vm=this;vm.user=Authentication.user,vm.changeUserPassword=changeUserPassword,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.passwordDetails={},vm.passwordDetails.newPassword=newPassword}angular.module("users").controller("ChangePasswordController",ChangePasswordController),ChangePasswordController.$inject=["$scope","$http","Authentication","PasswordValidator","newPassword"]}(),function(){"use strict";function ChangeProfilePictureController($scope,$timeout,$window,Authentication,FileUploader){function onAfterAddingFile(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){vm.imageURL=fileReaderEvent.target.result},0)}}}function onSuccessItem(fileItem,response,status,headers){vm.success=!0,vm.user=Authentication.user=response,cancelUpload()}function onErrorItem(fileItem,response,status,headers){cancelUpload(),vm.error=response.message}function uploadProfilePicture(){vm.success=vm.error=null,vm.uploader.uploadAll()}function cancelUpload(){vm.uploader.clearQueue(),vm.imageURL=vm.user.profileImageURL}var vm=this;vm.user=Authentication.user,vm.imageURL=vm.user.profileImageURL,vm.uploadProfilePicture=uploadProfilePicture,vm.cancelUpload=cancelUpload,vm.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture",onAfterAddingFile:onAfterAddingFile,onSuccessItem:onSuccessItem,onErrorItem:onErrorItem}),vm.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}})}angular.module("users").controller("ChangeProfilePictureController",ChangeProfilePictureController),ChangeProfilePictureController.$inject=["$scope","$timeout","$window","Authentication","FileUploader"]}(),function(){"use strict";function ConversationSettingsController($scope,$state,$http,$location,Users,Authentication){function update(){vm.success=vm.error=null;var user=new Users(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),vm.success=!0,vm.user=Authentication.user=response},function(response){vm.error=response.data.message})}var vm=this;vm.user=Authentication.user,vm.update=update}angular.module("users").controller("ConversationSettingsController",ConversationSettingsController),ConversationSettingsController.$inject=["$scope","$state","$http","$location","Users","Authentication"]}(),function(){"use strict";function EditProfileController($scope,$state,$http,$location,Users,Authentication,$uibModal){function updateUserProfile(isValid){if(vm.success=vm.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=new Users(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),vm.success=!0,vm.user=Authentication.user=response,vm.copyUser=angular.copy(vm.user),vm.editStatus=""},function(response){vm.error=response.data.message})}function changePassword(){return vm.userForm.$valid?void(vm.passwordDetails&&""!==vm.passwordDetails.password?$uibModal.open({templateUrl:"modules/users/client/views/settings/confirm-original-password.client.view.html",controller:"ChangePasswordController",controllerAs:"vm",resolve:{newPassword:function(){return vm.passwordDetails.password}}}):vm.passwordError=!0):!1}function editField(editStatus){vm.userForm.$valid&&(vm.editStatus=editStatus)}function exitEditField(editStatus){vm.editStatus="",vm.user[editStatus]=vm.copyUser[editStatus]}var vm=this;vm.user=Authentication.user,vm.copyUser=angular.copy(vm.user),vm.updateUserProfile=updateUserProfile,vm.changePassword=changePassword,vm.editStatus="",vm.editField=editField,vm.exitEditField=exitEditField}angular.module("users").controller("EditProfileController",EditProfileController),EditProfileController.$inject=["$scope","$state","$http","$location","Users","Authentication","$uibModal"]}(),function(){"use strict";function InvoiceSettingsController($scope,$state,$http,$location,Users,Authentication){function update(){vm.success=vm.error=null,origDueDateAllowance!==vm.user.dueDateAllowance&&(vm.user.changedDueDateAllowance=!0),origTax!==vm.user.tax&&(vm.user.changedTax=!0),origCurrency!==vm.user.currency&&(vm.user.changedCurrency=!0);var user=new Users(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),vm.success=!0,vm.user=Authentication.user=response,$state.go("notifications")},function(response){vm.error=response.data.message})}function range(n){for(var foo=[],i=0;n>=i;i++)foo.push(i);return foo}function changeDueDateAllowance(){vm.user.dueDateAllowance=parseInt(vm.dueDateAllowance,10)}function changeUserDueDateAllowance(){vm.dueDateAllowance=vm.user.dueDateAllowance.toString()}function changeTax(){vm.user.tax=parseInt(vm.tax,10)}function changeUserTax(){vm.tax=vm.user.tax.toString()}var vm=this;vm.user=Authentication.user,vm.update=update,vm.range=range,vm.changeDueDateAllowance=changeDueDateAllowance,vm.changeUserDueDateAllowance=changeUserDueDateAllowance,vm.changeTax=changeTax,vm.changeUserTax=changeUserTax,vm.dueDateAllowance=vm.user.dueDateAllowance.toString(),vm.tax=vm.user.tax.toString();var origDueDateAllowance=angular.copy(vm.user.dueDateAllowance),origTax=angular.copy(vm.user.tax),origCurrency=angular.copy(vm.user.currency);vm.currencySymbols={USD:"$",AUD:"$",EUR:"€",GBP:"£",CAD:"$",ALL:"Lek",ARS:"$",AWG:"ƒ",BSD:"$",BBD:"$",BYR:"p.",BZD:"BZ$",BMD:"$",BOB:"$b",BAM:"KM",BWP:"P",BGN:"лв",BRL:"R$",BND:"$",KHR:"៛",KYD:"$",CLP:"$",CNY:"¥",COP:"$",CRC:"₡",HRK:"kn",CUP:"₱",CZK:"Kč",DKK:"kr",DOP:"RD$",XCD:"$",EGP:"£",SVC:"$",FKP:"£",FJD:"$",GHS:"¢",GIP:"£",GTQ:"Q",GGP:"£",GYD:"$",HNL:"L",HKD:"$",HUF:"Ft",ISK:"kr",IDR:"Rp",IRR:"﷼  ﷼",IMP:"£",ILS:"₪",JMD:"J$",JPY:"¥",JEP:"£",KZT:"лв",KRW:"₩",KGS:"лв",LAK:"₭",LBP:"£",LRD:"$",MKD:"ден",MYR:"RM",MUR:"₨",MXN:"$",MNT:"₮",MZN:"MT",NAD:"$",NPR:"₨",ANG:"ƒ",NZD:"$",NIO:"C$",NGN:"₦",NOK:"kr",OMR:"﷼",PKR:"₨",PAB:"B/.",PYG:"Gs",PEN:"S/.",PHP:"₱",PLN:"zł",QAR:"﷼  ﷼",RON:"lei",RUB:"руб",SHP:"£",SAR:"﷼ ﷼",RSD:"Дин.",SCR:"₨",SGD:"$",SBD:"$",SOS:"S",ZAR:"R",LKR:"₨",SEK:"kr",CHF:"CHF",SRD:"$",SYP:"£",TWD:"NT$",THB:"฿",TTD:"TT$",TVD:"$",UAH:"₴",UYU:"$U",UZS:"лв",VEF:"Bs",VND:"₫",YER:"﷼",ZWD:"Z$"},vm.user.currency&&""!==vm.user.currency||(vm.user.currency="USD")}angular.module("users").controller("InvoiceSettingsController",InvoiceSettingsController),InvoiceSettingsController.$inject=["$scope","$state","$http","$location","Users","Authentication"]}(),function(){"use strict";function ManageIntegrationsController($scope,$http,Authentication,Users){function hasConnectedAdditionalSocialAccounts(){return this.user.additionalProvidersData&&Object.keys($scope.user.additionalProvidersData).length}function isConnectedSocialAccount(provider){return vm.user.provider===provider||vm.user.additionalProvidersData&&vm.user.additionalProvidersData[provider]}function removeUserSocialAccount(provider){vm.success=vm.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){vm.success=!0,vm.user=Authentication.user=response}).error(function(response){vm.error=response.message})}function update(){vm.success=vm.error=null;var user=new Users(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),vm.success=!0,vm.user=Authentication.user=response},function(response){vm.error=response.data.message})}var vm=this;vm.user=Authentication.user,vm.hasConnectedAdditionalSocialAccounts=hasConnectedAdditionalSocialAccounts,vm.isConnectedSocialAccount=isConnectedSocialAccount,vm.removeUserSocialAccount=removeUserSocialAccount,vm.update=update}angular.module("users").controller("ManageIntegrationsController",ManageIntegrationsController),ManageIntegrationsController.$inject=["$scope","$http","Authentication","Users"]}(),function(){"use strict";function PlansController($scope,$state,$http,$location,Users,Authentication){function update(){vm.success=vm.error=null;var user=new Users(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),vm.success=!0,vm.user=Authentication.user=response},function(response){vm.error=response.data.message})}var vm=this;vm.user=Authentication.user,vm.update=update}angular.module("users").controller("PlansController",PlansController),PlansController.$inject=["$scope","$state","$http","$location","Users","Authentication"]}(),function(){"use strict";function PlansController($scope,$state,$http,$location,Users,Authentication){function update(){vm.success=vm.error=null;var user=new Users(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),vm.success=!0,vm.user=Authentication.user=response},function(response){vm.error=response.data.message})}var vm=this;vm.user=Authentication.user,vm.update=update}angular.module("users").controller("PlansController",PlansController),PlansController.$inject=["$scope","$state","$http","$location","Users","Authentication"]}(),function(){"use strict";function SettingsController($scope,$state,Authentication){var vm=this;vm.state=$state,vm.user=Authentication.user}angular.module("users").controller("SettingsController",SettingsController),SettingsController.$inject=["$scope","$state","Authentication"]}(),function(){"use strict";function TeamController($scope,getUsers,$window,$http,Authentication){function remove(user){$window.confirm("Are you sure you want to delete this user?")&&$http.post("/api/users/delete",{user:user}).success(function(response){vm.users.splice(vm.users.indexOf(user),1)}).error(function(response){console.log(response)})}function setManager(user,index){$window.confirm("Are you sure you want to set this user to manager?")&&$http.post("/api/users/setmanager",{user:user}).success(function(response){vm.users[index]=response}).error(function(response){console.log(response)})}function setUser(user,index){$window.confirm("Are you sure you want to set this user to general user?")&&$http.post("/api/users/setuser",{user:user}).success(function(response){vm.users[index]=response}).error(function(response){console.log(response)})}var vm=this;vm.users=getUsers.data,vm.remove=remove,vm.setManager=setManager,vm.setUser=setUser,vm.authentication=Authentication}angular.module("users").controller("TeamController",TeamController),TeamController.$inject=["$scope","getUsers","$window","$http","Authentication"]}(),function(){"use strict";function passwordValidator(PasswordValidator){function link(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.getPopoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.getPopoverMsg="",scope.passwordErrors=[],status=!0)}return status}}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("passwordValidator",passwordValidator),passwordValidator.$inject=["PasswordValidator"]}(),function(){"use strict";function passwordVerify(){function link(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}var directive={require:"ngModel",scope:{passwordVerify:"="},link:link};return directive}angular.module("users").directive("passwordVerify",passwordVerify)}(),function(){"use strict";function lowercase(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("lowercase",lowercase),angular.module("users").directive("focusMe",["$timeout","$parse",function($timeout,$parse){return{link:function(scope,element,attrs){var model=$parse(attrs.focusMe);scope.$watch(model,function(value){value===!0&&$timeout(function(){element[0].focus(),element[0].selectionStart=0,element[0].selectionEnd=0})})}}}])}(),function(){"use strict";function Authentication($window){var auth={user:$window.user};return auth}angular.module("users.services").factory("Authentication",Authentication),Authentication.$inject=["$window"]}(),function(){"use strict";function PasswordValidator($window){function getResult(password){var result=owaspPasswordStrengthTest.test(password);return result}function getPopoverMsg(){var popoverMsg="Please enter a passphrase or password with 10 or more characters, numbers, lowercase, uppercase, and special characters.";return popoverMsg}var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest,service={getResult:getResult,getPopoverMsg:getPopoverMsg};return service}angular.module("users.services").factory("PasswordValidator",PasswordValidator),PasswordValidator.$inject=["$window"]}(),function(){"use strict";function Users($resource){return $resource("api/users",{},{update:{method:"PUT"},"delete":{method:"DELETE"}})}function AdminService($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}angular.module("users.services").factory("Users",Users),Users.$inject=["$resource"],angular.module("users.admin.services").factory("AdminService",AdminService),AdminService.$inject=["$resource"]}();